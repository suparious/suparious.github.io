#!/bin/bash

# Enhanced Chat Script for Artemis API
# Version: 2.0

set -euo pipefail

# --- Configuration ---
source	${HOME}/.chat-script.conf
# Can be overridden by environment variables
API_URL="${ARTEMIS_API_URL:-https://artemis.hq.solidrust.net/v1/chat/completions}"
API_KEY="${ARTEMIS_API_KEY:-}"  # Set this if your API requires authentication

# --- Default Values ---
DEFAULT_MODEL="Orion-zhen/DeepHermes-3-Llama-3-8B-Preview-AWQ"
DEFAULT_USER_CONTENT="Who won the world series in 2020?"
DEFAULT_SYSTEM_CONTENT="You are a helpful assistant."
DEFAULT_TEMPERATURE="0.7"
DEFAULT_MAX_TOKENS=""
DEFAULT_OUTPUT_FORMAT="pretty"  # pretty, raw, content-only

# Initialize variables with default values
MODEL=$DEFAULT_MODEL
USER_CONTENT=$DEFAULT_USER_CONTENT
SYSTEM_CONTENT=$DEFAULT_SYSTEM_CONTENT
TEMPERATURE=$DEFAULT_TEMPERATURE
MAX_TOKENS=$DEFAULT_MAX_TOKENS
OUTPUT_FORMAT=$DEFAULT_OUTPUT_FORMAT
VERBOSE=false
CONVERSATION_FILE=""
STREAM=false

# --- Color Codes ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# --- Utility Functions ---
error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}Warning: $1${NC}" >&2
}

success() {
    echo -e "${GREEN}$1${NC}"
}

info() {
    if [[ "$VERBOSE" == true ]]; then
        echo -e "${BLUE}Info: $1${NC}" >&2
    fi
}

# Check if required commands are available
check_dependencies() {
    local deps=("curl" "jq")
    local missing=()
    
    for cmd in "${deps[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    if [ ${#missing[@]} -ne 0 ]; then
        error "Missing required dependencies: ${missing[*]}"
        echo "Please install the missing commands and try again." >&2
        exit 1
    fi
}

# --- Help Function ---
show_help() {
    cat << EOF
Enhanced Chat Script for Artemis API

Usage: $(basename "$0") [OPTIONS]

OPTIONS:
    -m, --model <model>              AI model to use (default: "$DEFAULT_MODEL")
    -u, --user <content>             User's message (default: "$DEFAULT_USER_CONTENT")
    -s, --system <content>           System prompt (default: "$DEFAULT_SYSTEM_CONTENT")
    -t, --temperature <value>        Temperature for randomness (0-2, default: $DEFAULT_TEMPERATURE)
    -x, --max-tokens <value>         Maximum tokens in response
    -f, --file <path>                Read user content from file
    -c, --conversation <path>        Continue conversation from JSON file
    -o, --output <format>            Output format: pretty|raw|content-only (default: $DEFAULT_OUTPUT_FORMAT)
    --stream                         Enable streaming responses
    -v, --verbose                    Enable verbose output
    -h, --help                       Display this help message

ENVIRONMENT VARIABLES:
    ARTEMIS_API_URL                  API endpoint URL
    ARTEMIS_API_KEY                  API key for authentication

EXAMPLES:
    # Simple query
    $(basename "$0") -u "Explain quantum computing"
    
    # Use specific model with custom system prompt
    $(basename "$0") -m "gpt-4" -s "You are a Python expert" -u "How do I use asyncio?"
    
    # Read question from file
    $(basename "$0") -f question.txt
    
    # Continue a conversation
    $(basename "$0") -c conversation.json -u "Tell me more about that"
    
    # Get only the response content
    $(basename "$0") -u "What is 2+2?" -o content-only

EOF
}

# --- Argument Parsing ---
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -m|--model)
                MODEL="$2"
                shift 2
                ;;
            -u|--user)
                USER_CONTENT="$2"
                shift 2
                ;;
            -s|--system)
                SYSTEM_CONTENT="$2"
                shift 2
                ;;
            -t|--temperature)
                TEMPERATURE="$2"
                if ! [[ "$TEMPERATURE" =~ ^[0-9]*\.?[0-9]+$ ]] || (( $(echo "$TEMPERATURE > 2" | bc -l) )); then
                    error "Temperature must be a number between 0 and 2"
                    exit 1
                fi
                shift 2
                ;;
            -x|--max-tokens)
                MAX_TOKENS="$2"
                if ! [[ "$MAX_TOKENS" =~ ^[0-9]+$ ]]; then
                    error "Max tokens must be a positive integer"
                    exit 1
                fi
                shift 2
                ;;
            -f|--file)
                if [[ ! -f "$2" ]]; then
                    error "File not found: $2"
                    exit 1
                fi
                USER_CONTENT=$(cat "$2")
                shift 2
                ;;
            -c|--conversation)
                CONVERSATION_FILE="$2"
                if [[ ! -f "$CONVERSATION_FILE" ]]; then
                    error "Conversation file not found: $CONVERSATION_FILE"
                    exit 1
                fi
                shift 2
                ;;
            -o|--output)
                OUTPUT_FORMAT="$2"
                if [[ ! "$OUTPUT_FORMAT" =~ ^(pretty|raw|content-only)$ ]]; then
                    error "Invalid output format. Use: pretty, raw, or content-only"
                    exit 1
                fi
                shift 2
                ;;
            --stream)
                STREAM=true
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            --)
                shift
                break
                ;;
            -*)
                error "Unknown option: $1"
                show_help
                exit 1
                ;;
            *)
                break
                ;;
        esac
    done
}

# --- Build JSON Payload ---
build_payload() {
    local messages_json
    
    # If continuing a conversation, load existing messages
    if [[ -n "$CONVERSATION_FILE" ]]; then
        info "Loading conversation from $CONVERSATION_FILE"
        messages_json=$(jq '.messages' "$CONVERSATION_FILE" 2>/dev/null || echo '[]')
        
        # Add new user message
        messages_json=$(echo "$messages_json" | jq \
            --arg content "$USER_CONTENT" \
            '. + [{"role": "user", "content": $content}]')
    else
        # Create new conversation
        messages_json=$(jq -n \
            --arg system "$SYSTEM_CONTENT" \
            --arg user "$USER_CONTENT" \
            '[
                {"role": "system", "content": $system},
                {"role": "user", "content": $user}
            ]')
    fi
    
    # Build the complete payload
    local payload=$(jq -n \
        --arg model "$MODEL" \
        --argjson messages "$messages_json" \
        --arg temperature "$TEMPERATURE" \
        --argjson stream "$STREAM" \
        '{
            model: $model,
            messages: $messages,
            temperature: ($temperature | tonumber),
            stream: $stream
        }')
    
    # Add max_tokens if specified
    if [[ -n "$MAX_TOKENS" ]]; then
        payload=$(echo "$payload" | jq --arg max_tokens "$MAX_TOKENS" '. + {max_tokens: ($max_tokens | tonumber)}')
    fi
    
    echo "$payload"
}

# --- Make API Request ---
make_request() {
    local payload="$1"
    local curl_args=("-s" "-X" "POST" "$API_URL" "-H" "Content-Type: application/json")
    
    # Add API key if provided
    if [[ -n "$API_KEY" ]]; then
        curl_args+=("-H" "Authorization: Bearer $API_KEY")
    fi
    
    # Add data
    curl_args+=("-d" "@-")
    
    info "Making request to $API_URL"
    info "Payload: $(echo "$payload" | jq -c .)"
    
    local response
    local http_code
    
    # Make request and capture both response and HTTP code
    response=$(echo "$payload" | curl -w "\n__HTTP_CODE__:%{http_code}" "${curl_args[@]}")
    http_code=$(echo "$response" | grep -o "__HTTP_CODE__:[0-9]*" | cut -d: -f2)
    response=$(echo "$response" | sed '/__HTTP_CODE__:/d')
    
    if [[ "$http_code" -ge 200 && "$http_code" -lt 300 ]]; then
        echo "$response"
    else
        error "API request failed with HTTP code: $http_code"
        if [[ -n "$response" ]]; then
            echo "$response" | jq . 2>/dev/null || echo "$response"
        fi
        exit 1
    fi
}

# --- Process Response ---
process_response() {
    local response="$1"
    local output
    
    case "$OUTPUT_FORMAT" in
        pretty)
            output=$(echo "$response" | jq .)
            ;;
        raw)
            output="$response"
            ;;
        content-only)
            output=$(echo "$response" | jq -r '.choices[0].message.content // "No content in response"')
            ;;
    esac
    
    echo "$output"
    
    # Save conversation if requested
    if [[ -n "$CONVERSATION_FILE" ]] || [[ "$VERBOSE" == true ]]; then
        local save_file="${CONVERSATION_FILE:-conversation_$(date +%Y%m%d_%H%M%S).json}"
        
        # Extract messages from response and append to conversation
        local new_message=$(echo "$response" | jq '.choices[0].message // {}')
        local updated_messages=$(echo "$payload" | jq --argjson new "$new_message" '.messages + [$new]')
        
        # Save updated conversation
        jq -n \
            --arg model "$MODEL" \
            --argjson messages "$updated_messages" \
            --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '{
                model: $model,
                messages: $messages,
                timestamp: $timestamp
            }' > "$save_file"
        
        if [[ "$VERBOSE" == true ]]; then
            info "Conversation saved to: $save_file"
        fi
    fi
}

# --- Main Function ---
main() {
    check_dependencies
    parse_args "$@"
    
    # Build JSON payload
    local payload=$(build_payload)
    
    # Make API request
    local response=$(make_request "$payload")
    
    # Process and display response
    process_response "$response"
}

# Run main function
main "$@"
